@model PokemonVM
@{
    ViewData["Title"] = "Listado de Pokémon";
}
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Cerrar"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Cerrar"></button>
    </div>
}


<h2>Listado de Pokémon</h2>

<!-- Filtros (Nombre + Tipo + Buscar) -->
<div class="container mb-3">
    <div class="row g-2 align-items-center">
        <!-- Formulario de búsqueda por nombre -->
        <div class="col-md-5">
            <form asp-action="Index" asp-controller="Home" method="get" class="mb-3">
                <div class="input-group">
                    <input type="text" name="searchTerm" value="@Model.SearchTerm" class="form-control" placeholder="Buscar Pokémon por nombre" />
                    <input type="hidden" name="pokemonType" value="@Model.SearchType" />
                    <input type="hidden" name="page" value="@Model.CurrentPage" />
                    <button type="submit" class="btn btn-primary">Buscar</button>
                </div>
            </form>
        </div>

        <!-- Formulario de filtrado por tipo (envía automáticamente al cambiar) -->
        <div class="col-md-5">
            <form asp-action="Index" asp-controller="Home" method="get" class="mb-3">
                <input type="hidden" name="searchTerm" value="@Model.SearchTerm" />
                <select id="typeFilter" name="pokemonType" class="form-select" onchange="this.form.submit()">
                    <option value="">Todos los tipos</option>
                    @foreach (var type in Model.pokemonsType.Distinct())
                    {
                        <option value="@type" selected="@(type.ToString() == Model.SearchType)">
                            @type
                        </option>
                    }
                </select>
            </form>
        </div>
    </div>
</div>


<!-- Botones: Paginación + Exportar -->
<div class="container d-flex justify-content-between align-items-center">
    <!-- Paginación -->
    <div class="d-flex justify-content-center my-3">
        <nav>
            <ul class="pagination">

                <li class="page-item @(Model.CurrentPage <= 1 ? "disabled" : "")">
                    <a class="page-link"
                       asp-action="Index"
                       asp-route-page="@(Model.CurrentPage - 1)"
                       asp-route-searchTerm="@Model.SearchTerm"
                       asp-route-pokemonType="@Model.SearchType">
                        ← Anterior
                    </a>
                </li>

                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link"
                           asp-action="Index"
                           asp-route-page="@i"
                           asp-route-searchTerm="@Model.SearchTerm"
                           asp-route-pokemonType="@Model.SearchType">
                            @i
                        </a>
                    </li>
                }

                <li class="page-item @(Model.CurrentPage >= Model.TotalPages ? "disabled" : "")">
                    <a class="page-link"
                       asp-action="Index"
                       asp-route-page="@(Model.CurrentPage + 1)"
                       asp-route-searchTerm="@Model.SearchTerm"
                       asp-route-pokemonType="@Model.SearchType">
                        Siguiente →
                    </a>
                </li>

            </ul>
        </nav>
    </div>

    <!-- Exportar a Excel -->
    <form asp-action="ExportToExcel" asp-controller="Home" method="post" class="d-inline">
        @for (int i = 0; i < Model.listPokemonsModel.Results.Count; i++)
        {
            <input type="hidden" name="Pokemons[@i].Id" value="@Model.listPokemonsModel.Results[i].Id" />
            <input type="hidden" name="Pokemons[@i].Name" value="@Model.listPokemonsModel.Results[i].Name" />
            <input type="hidden" name="Pokemons[@i].Url" value="@Model.listPokemonsModel.Results[i].Url" />
            <input type="hidden" name="Pokemons[@i].ImageUrl" value="@Model.listPokemonsModel.Results[i].ImageUrl" />
            <input type="hidden" name="Pokemons[@i].TypesString" value="@string.Join(",", Model.listPokemonsModel.Results[i].Types)" />
        }
        <button type="submit" class="btn btn-success btn-sm">Exportar a Excel</button>
    </form>
</div>


<!-- Verifica si hay pokemons a mostrar -->
@if (Model.listPokemonsModel.Results.Any())
{
    <!-- Carga los pokemons en el GRID -->
    <div class="pokemon-grid">
        @foreach (var p in Model.listPokemonsModel.Results)
        {
            <div class="pokemon-card">
                <img src="@p.ImageUrl" alt="@p.Name" />
                <div class="pokemon-name">@p.Name</div>
                <button type="button" class="btn btn-outline-primary btn-sm"
                        onclick="showPokemonDetails(@p.Id)">
                    Detalles
                </button>
                <a asp-action="SendPokemonEmail" asp-controller="Home" asp-route-n="@p.Id" class="btn btn-outline-primary btn-sm">Enviar al Correo</a>
            </div>
        }
        <!-- Modal de Detalles del Pokémon -->
        <div class="modal fade" id="pokemonModal" tabindex="-1" aria-labelledby="pokemonModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content text-center">
                    <div class="modal-header">
                        <h5 class="modal-title" id="pokemonModalLabel">Detalles del Pokémon</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                    </div>
                    <div class="modal-body">
                        <img id="modalPokemonImage" class="img-fluid mb-3" alt="Imagen del Pokémon">
                        <p><strong>Nombre:</strong> <span id="modalPokemonName"></span></p>
                        <p><strong>ID:</strong> <span id="modalPokemonId"></span></p>
                        <p><strong>Tipos:</strong> <span id="modalPokemonTypes"></span></p>
                        <p><strong>Felicidad base:</strong> <span id="modalPokemonHappiness"></span></p>
                        <p><strong>Tasa de captura:</strong> <span id="modalPokemonCaptureRate"></span></p>
                        <p><strong>Legendario:</strong> <span id="modalPokemonLegendary"></span></p>
                        <p><strong>Mítico:</strong> <span id="modalPokemonMythical"></span></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>



    </div>
}
else
{
    <p>No hay pokémon para mostrar.</p>
}

<style>
    .pokemon-grid {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 20px;
        margin-top: 20px;
    }

    .pokemon-card {
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 10px;
        text-align: center;
        box-shadow: 2px 2px 5px rgba(0,0,0,0.1);
    }

    .pokemon-card img {
        max-width: 100%;
        height: auto;
    }

    .pokemon-name {
        font-weight: bold;
        margin-top: 10px;
        text-transform: capitalize;
    }
</style>

<script>
    function showPokemonDetails(id) {
        fetch(`/Home/GetPokemon?n=${id}`)
            .then(response => {
                if (!response.ok) throw new Error("Error al obtener el Pokémon");
                return response.json();
            })
            .then(data => {
                // Verifica qué está llegando
                console.log(data);

                document.getElementById("modalPokemonName").textContent = data.name;
                document.getElementById("modalPokemonId").textContent = data.id;
                document.getElementById("modalPokemonImage").src = data.imageUrl;
                document.getElementById("modalPokemonImage").alt = data.name;
                document.getElementById("modalPokemonTypes").textContent = (data.types || []).join(", ");
                document.getElementById("modalPokemonHappiness").textContent = data.base_happiness;
                document.getElementById("modalPokemonCaptureRate").textContent = data.capture_rate;
                document.getElementById("modalPokemonLegendary").textContent = data.is_legendary ? "Sí" : "No";
                document.getElementById("modalPokemonMythical").textContent = data.is_mythical == 1 ? "Sí" : "No";

                const modal = new bootstrap.Modal(document.getElementById('pokemonModal'));
                modal.show();
            })
            .catch(error => {
                console.error("Error en fetch:", error);
                alert("No se pudo obtener la información del Pokémon.");
            });
    }
</script>



